name: ${STACK_NAME:-bbssr}

networks:
  app_network:
    name: ${STACK_NAME:-bbssr}_app_network
    driver: bridge
  db_network:
    name: ${STACK_NAME:-bbssr}_db_network
    driver: bridge

x-redis-condition: &redis-condition
  condition: service_healthy

# MongoDB condition (service dependency)
x-mongodb-condition: &mongodb-condition
  condition: service_healthy

services:
  web:
    container_name: ${STACK_NAME:-bbssr}_web
    build: 
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "${APP_PORT:-5000}:5000"
    volumes:
      - bbssr_data:/data
    networks:
      - app_network
      - db_network
    env_file:
      - stack.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      redis: *redis-condition  # Redis enabled for Celery
      mongodb: *mongodb-condition

  redis:
    container_name: ${STACK_NAME:-bbssr}_redis
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - bbssr_redis:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Celery worker for async webhook processing
  celery_worker:
    container_name: ${STACK_NAME:-bbssr}_celery_worker
    build: 
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    volumes:
      - bbssr_data:/data
    networks:
      - app_network
      - db_network
    env_file:
      - stack.env
    command: celery -A app.celery_app worker --loglevel=info --concurrency=4
    depends_on:
      redis: *redis-condition
      mongodb: *mongodb-condition

  # Celery monitoring with Flower
  celery_flower:
    container_name: ${STACK_NAME:-bbssr}_flower
    build: 
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    ports:
      - "5555:5555"
    volumes:
      - bbssr_data:/data
    networks:
      - app_network
    env_file:
      - stack.env
    command: celery -A app.celery_app flower --port=5555
    depends_on:
      redis: *redis-condition
    deploy:
      replicas: 1  # Optional - set to 0 to disable Flower

  mongodb:
    container_name: ${STACK_NAME:-bbssr}_mongodb
    image: mongo:7
    restart: unless-stopped
    ports:
      - "27017:27017"
    volumes:
      - bbssr_db:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGODB_USER:-bbssr_user}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGODB_PASSWORD:-secure_password}
      MONGO_INITDB_DATABASE: ${MONGODB_DB:-bbssr_db}
    networks:
      - db_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 40s


  cloudflared:
    container_name: ${STACK_NAME:-bbssr}_cloudflared
    image: cloudflare/cloudflared:latest
    entrypoint: ["cloudflared", "--no-autoupdate"]
    command: ["tunnel", "run"]
    restart: unless-stopped
    env_file:
      - stack.env
    networks:
      - app_network
    depends_on:
      - web

volumes:
  bbssr_data:
  bbssr_db:
  bbssr_redis: