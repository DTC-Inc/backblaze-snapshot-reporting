name: ${STACK_NAME:-bbssr}

networks:
  app_network:
    name: ${STACK_NAME:-bbssr}_app_network
    driver: bridge
  db_network:
    name: ${STACK_NAME:-bbssr}_db_network
    driver: bridge

x-postgres-condition: &postgres-condition
  condition: service_healthy
  required: false

x-redis-condition: &redis-condition
  condition: service_healthy
  required: true

services:
  web:
    container_name: ${STACK_NAME:-bbssr}_web
    build: .
    image: bbssr
    ports:
      - "${APP_PORT:-5000}:5000"
    volumes:
      - bbssr_data:/data
    restart: unless-stopped
    networks:
      - app_network
      - db_network
    env_file:
      - stack.env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      postgres: *postgres-condition
      redis: *redis-condition

  redis:
    container_name: ${STACK_NAME:-bbssr}_redis
    image: redis:7-alpine
    restart: unless-stopped
    networks:
      - app_network
    volumes:
      - bbssr_redis:/data
    command: redis-server --save 60 1 --loglevel warning
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    deploy:
      # Redis will start if REDIS_ENABLED=true (default)
      replicas: ${REDIS_ENABLED:-1}
            
  postgres:
    container_name: ${STACK_NAME:-bbssr}_postgres
    image: postgres:14-alpine
    restart: unless-stopped
    volumes:
      - bbssr_db:/var/lib/postgresql/data
    env_file:
      - stack.env
    networks:
      - db_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-bbssr_user} -d ${POSTGRES_DB:-bbssr_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    deploy:
      # Service will only start if USE_POSTGRES=true
      replicas: ${USE_POSTGRES:-0}

  cloudflared:
    container_name: ${STACK_NAME:-bbssr}_cloudflared
    image: cloudflare/cloudflared:latest
    entrypoint: ["cloudflared", "--no-autoupdate"]
    command: ["tunnel", "run"]
    restart: unless-stopped
    env_file:
      - stack.env
    networks:
      - app_network
    depends_on:
      - web

volumes:
  bbssr_data:
  bbssr_db:
  bbssr_redis: